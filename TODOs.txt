
* Probably need an Arena base class too. 

* Separate contsants.py and move functions to utils.py

* Implement suit_mapping as a named tuple?!?!?!

*TODO: AM i allowed to open with the called ace?

* Add a force_play to BaseBot for debugging. 

# Otherplayersmayhave should be stored IN the nodes, and updated iteratively, 
	rather than having to run through the whole game history every time!!!


#TODO: replace utility with straight number of points. For now, only calculate at games end when partners are known. 
#Could however make a heuristic search robot which uses current points as heuristic. Must solve the CSP first. 

# Put hardcoded rules for the gamestate in each new instance of a gamestate with the new function!!! 
	That is to say, we need a factories which deliver different gamestates depending on the mode. (Do we? differences between states are minor).


# Replace +-1 utilities with actual point values. 

# add in a winning_points function. 

# add in a winners function into the state. Currently I can't debug the winners except for if i print them 

# add a check at the end of the game to see if everyone played by the rules. 

# get consistent naming p_id vs p_num etc. 

# Need more robust checks on gamesate

# Change node creation so that the card_constraints are updated iteratively!. This should save time. Currently averaging 900 node expansions on first move. 
 

# winning_player in gamestate can be replaced by a dictionary which maps card to priority. Changes O(n) runtime to O(1).

# Distribute_cards takes up 25% of TOTAL RUNTIME. NEED TO MAKE THIS FASTER.

# Make an experiment to measure the average branching factor!!!!!! want to know!
