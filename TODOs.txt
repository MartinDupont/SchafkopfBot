
* Probably need an Arena base class too. 

* Separate contsants.py and move functions to utils.py

* make sketch code for a play loop for each mode.


* Implement suit_mapping as a named tuple?!?!?!

*TODO: AM i allowed to open with the called ace?

* Add a force_play to BaseBot for debugging. 

# a step up in cleverness, is that once I have (otherplayersmayhave),
# i can put set self.untried_actions as otherplayersmayhave, in the nodes.
# Better! otherplayersmayhave should be stored IN the nodes, and updated iteratively, 
	rather than having to run through the whole game history every time!!!


#TODO: replace utility with straight number of points. For now, only calculate at games end when partners are known. 
#Could however make a heuristic search robot which uses current points as heuristic. Must solve the CSP first. 

# Put hardcoded rules for the gamestate in each new instance of a gamestate with the new function!!! 

# Replace +-1 utilities with actual point values. 

# add in a winning_points function. 

# add in a winners function into the state. Currently I can't debug the winners except for if i print them 

# add a check at the end of the game to see if everyone played by the rules. 

# get consistent naming p_id vs p_num etc. 

# when trying to print incomplete state:
out += [(int(input_string[ind]), input_string[ind+1:ind+4])]

ValueError: invalid literal for int() with base 10: ' '

# TODO: one of the assertions in distribute_cards is probably unnecessary. 

# Need more robust checks on gamesate

# check: is there something wrong with possible_hands in expand_node??? returns dict with empty entries????
