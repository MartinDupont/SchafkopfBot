
*TODO: AM i allowed to open with the called ace?

# Otherplayersmayhave should be stored IN the nodes, and updated iteratively, 
	rather than having to run through the whole game history every time!!!(MonteCarloPlus)

# add a check at the end of the game to see if everyone played by the rules. 

# Need more robust checks on gamesate

# Idea, add winner_points variable to the utility function so that running tallies remain zero sum. 

# Change node creation so that the card_constraints are updated iteratively!. This should save time. 
 

# winning_player in gamestate can be replaced by a dictionary which maps card to priority. Changes O(n) runtime to O(1).

# Distribute_cards takes up 25% of TOTAL RUNTIME. NEED TO MAKE THIS FASTER.

# STATE NEEDS TO CHECK IF THE PLAYERS HAVE PLAYED IN A GOOD ORDER.

# Add in a special exception that says when someone has misplayed!

# Make it so that humans can reset the game state to a previous round. Current interface chokes up all the time.


# I CAN make a total ordering on cards, have all 7's =1 , 8's =2 etc... up to H7 ... EO. ! can now define a play_highest_card.

# BUG: play_or_not does not currently work for ProxyBot because in order to print out his string correctly, he needs to know which player number he has, 
and not just how many people played before him. 

# REPLACE PROXYBOT. This was a shitty idea. Just integrate it into the HumanInterface. 

# THINGS THAT MY BIDDING PHASE DOESN"T DO RIGHT:
	* No Contra or Re
	* Cards thrown in instead of ramsch if all players are blocked (not an official rule)
	* Players playing after the first guy must choose a higher game mode. 

# PIMC doesn't generate possible worlds in a principled way. He generates worlds randomly, and these worlds may overlap.
 	Ideally, we would uniformly sample all possible worlds. However, the chance of a collision is small when the number of possible worlds is high. 
	When the number of possible worlds is small, then we can search to the end anyway. It doesn't matter too much, but it's inelegant. 

# I need much better tests for MCTS and PIMC bots. 
	* Generate more cases where there is only one possible winning move. 
	* Test that all the subroutines are working. 
	* Lots of the logic in test_tree can be moved back into the agent.

# I need to be able to specify hyperparameters for my agents. 

# Wishlist for my GUI:
	* Time travel
	* toggle visibility of game history
	* Checks to see if everyone played by the rules. 
	* Specify Arbitrary amounts of bots and players. 
	* Graceful exit.

# Too much code duplication between PIMC and MCTS. Perhaps move back-up etc. into the nodes utilities or something?

# Tidy up my filter_playable_cards. It works, but it's ugly. 