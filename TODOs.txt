
* Probably need an Arena base class too. 

* Separate contsants.py and move functions to utils.py

* make sketch code for a play loop for each mode.


* Implement suit_mapping as a named tuple?!?!?!

*TODO: AM i allowed to open with the called ace?

* Add a force_play to BaseBot for debugging. 

# Otherplayersmayhave should be stored IN the nodes, and updated iteratively, 
	rather than having to run through the whole game history every time!!!


#TODO: replace utility with straight number of points. For now, only calculate at games end when partners are known. 
#Could however make a heuristic search robot which uses current points as heuristic. Must solve the CSP first. 

# Put hardcoded rules for the gamestate in each new instance of a gamestate with the new function!!! 
	That is to say, we need a factories which deliver different gamestates depending on the mode. (Do we? differences between states are minor).


# Replace +-1 utilities with actual point values. 

# add in a winning_points function. 

# add in a winners function into the state. Currently I can't debug the winners except for if i print them 

# add a check at the end of the game to see if everyone played by the rules. 

# get consistent naming p_id vs p_num etc. 


# TODO: one of the assertions in distribute_cards is probably unnecessary. 

# Need more robust checks on gamesate

# move the constraint propagation to inside the nodes, that will cut down the search space massively! Averaging about 2000 node expansions before the change. 

# Need to loop my assign_cards tests mutliple times, because the output is random!

# Greedy hill-climbing works, but it is very slow and inefficient. Things:
	1) Make it quicker. Even possibly use new data types!
	2) check that, if after passing the two solveability constraints, and propagating the two types of constraints, 
	some sort of single-pass algorithm is guaranteed to work. 
	3) integrate all this into the node creation, so that I don't waste so much time redoing the calculations!
	averaging 700 node expansions before optimizing. 


# SHould I merge how_many and inverse_legal_moves???? Im doing multiple passes through the state history (is short though)??